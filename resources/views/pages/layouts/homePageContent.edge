@each(tweet in tweets)
<div class="bg-black text-white p-4 shadow-lg border-t border-b border-gray-800 w-full max-w-2xl mx-auto mb-6 rounded-xl">  
  <div class="flex items-start gap-4" id="tweet-{{ tweet.id }}">  
    <!-- Profil -->  
    <img src="{{ tweet.user?.avatar || '/default-avatar.png' }}" alt="Avatar" class="w-12 h-12 rounded-full object-cover">      
    <div class="flex-1">  
      <div class="flex justify-between items-start gap-2 flex-wrap">  
        <div class="text-sm md:text-base">  
          <span class="font-bold block">{{ tweet.user.firstname }} {{ tweet.user.lastname }}</span>  
          <span class="text-gray-500 text-xs md:text-sm">  
            {{ tweet.user.username }} · {{ tweet.createdAt }}  
          </span>  
        </div>  
        <button class="text-gray-500 hover:text-white text-xl leading-none">...</button>  
      </div>  

      <p class="mt-2 text-sm md:text-base whitespace-pre-wrap">{{ tweet.content }}</p>

          <!-- Media section -->
          <div class="w-full mt-3 {{ tweet.medias.length === 1 ? 'aspect-video' : 'grid grid-cols-2 gap-2' }}">
            @each(media in tweet.medias)
                @if(media.url.endsWith('.mp4') || media.url.endsWith('.webm'))
                    <video src="{{media.url}}" class="rounded-xl w-full h-auto max-h-80 object-contain" controls></video>
                @else
                    <img src="{{media.url}}" class="rounded-xl w-full h-auto max-h-96 object-cover">
                @endif
            @endeach
          </div>

          <!-- Interaction icons -->
          <div class="flex items-center justify-between mt-4 text-gray-500 text-sm">
            <button class="hover:text-blue-500 flex items-center space-x-1">
              <i class="fa-regular fa-comment"></i>
              <span></span>
            </button>

            <!-- Retweet -->
            <button class="hover:text-green-500 flex items-center space-x-1">
              <i class="fa-solid fa-retweet"></i>
              <span></span>
            </button>

            <!-- Like -->
            <button 
            class="like-button flex items-center space-x-1 group" 
            onclick="toggleLike({{ tweet.id }})">
            
            <i 
              id="like-icon-{{ tweet.id }}" 
              class="fa-heart transition-all duration-150 
              {{ tweet.isLikedByUser ? 'fa-solid text-red-500' : 'fa-regular text-gray-400' }}">
            </i>
          
            <span 
              id="like-count-{{ tweet.id }}" 
              class="transition-opacity duration-150 
              {{ tweet.likeCount > 0 ? 'text-gray-300' : 'hidden' }}">
              {{ tweet.likeCount || 0 }}
            </span>
          
          </button>
      
          <!-- Signet -->
          <button class="hover:text-yellow-500 flex items-center space-x-1">
            <i class="fa-regular fa-bookmark"></i>
          </button>

          <!-- Sharing -->
          <button class="hover:text-gray-700 flex items-center space-x-1">
            <i class="fa-solid fa-share"></i>
          </button>
            <!-- More options -->
          <button class="hover:text-gray-700 flex items-center space-x-1">
            <i class="fa-solid fa-ellipsis"></i>
          </button>
      </div>
    </div>
  </div>
</div>
@endeach


{{--   --}}
<script>
  async function toggleLike(tweetId) {
    try {
      const response = await fetch(`/tweets/${tweetId}/like`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-TOKEN': '{{ csrfToken }}',
        },
      });
  
      if (!response.ok) {
        console.error('Erreur lors de la requête:', response.statusText);
        return;
      }
  
      const { likeCount, isLiked } = await response.json();
  
      const likeCountElement = document.getElementById(`like-count-${tweetId}`);
      const likeIcon = document.getElementById(`like-icon-${tweetId}`);
  
      // update like count
      if (likeCount > 0) {
        likeCountElement.textContent = likeCount;
        likeCountElement.classList.remove('hidden');
      } else {
        likeCountElement.classList.add('hidden');
      }
  
      // update like icon
      if (isLiked) {
        likeIcon.classList.remove('fa-regular');
        likeIcon.classList.add('fa-solid', 'text-red-500');
      } else {
        likeIcon.classList.remove('fa-solid', 'text-red-500');
        likeIcon.classList.add('fa-regular');
      }
  
    } catch (error) {
      console.error('Erreur lors du traitement:', error);
    }
  }
  </script>
  