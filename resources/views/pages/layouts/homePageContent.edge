@each(tweet in tweets)
<div class="bg-black text-white p-4 shadow-lg border-t border-b border-gray-800 w-full max-w-2xl mx-auto mb-6 rounded-xl">

  <!-- Si retweet -->
  @if(tweet.retweetFrom)
    <div class="text-gray-400 text-sm mb-4 flex items-center space-x-1">
      <img src="{{ tweet.retweetFrom && tweet.retweetFrom.user ? tweet.retweetFrom.user.profile_picture : (tweet.user ? tweet.user.profile_picture : '/default-avatar.png') }}" class="w-12 h-12 rounded-full object-cover">      
      <span>Retweeté par {{ tweet.user.username }}</span>
    </div>
  @endif

  <div class="flex items-start gap-4" id="tweet-{{ tweet.id }}">
    <img src="{{ tweet.retweetFrom && tweet.retweetFrom.user ? tweet.retweetFrom.user.profile_picture : (tweet.user ? tweet.user.profile_picture : '/default-avatar.png') }}" class="w-12 h-12 rounded-full object-cover">    
    <div class="flex-1">
      <div class="flex justify-between items-start gap-2 flex-wrap">
        <div class="text-sm md:text-base">
          <span class="font-bold block">
            {{ tweet.retweetFrom ? tweet.retweetFrom.user.firstname + ' ' + tweet.retweetFrom.user.lastname : tweet.user.firstname + ' ' + tweet.user.lastname }}
          </span>
          <span class="text-gray-500 text-xs md:text-sm">
            {{ tweet.retweetFrom ? tweet.retweetFrom.user.username : tweet.user.username }} · {{ tweet.createdAt }}
          </span>
        </div>
        <button class="text-gray-500 hover:text-white text-xl leading-none">...</button>
      </div>

      <a onclick="toggleComments(event, {{ tweet.id }})" href="#">
        <p class="mt-2 text-sm md:text-base whitespace-pre-wrap">
          {{ tweet.retweetFrom ? tweet.retweetFrom.content : tweet.content }}
        </p>
      </a>

      <!-- Media (du tweet original si retweet) -->
      <a onclick="toggleComments(event, {{ tweet.id }})" href="#">
        @if((tweet.retweetFrom ? tweet.retweetFrom.medias.length : tweet.medias.length) > 0)
          <div class="w-full mt-3 {{ (tweet.retweetFrom ? tweet.retweetFrom.medias.length : tweet.medias.length) === 1 ? 'aspect-video' : 'grid grid-cols-2 gap-2' }}">
            @each(media in (tweet.retweetFrom ? tweet.retweetFrom.medias : tweet.medias))
              @if(media.url.endsWith('.mp4') || media.url.endsWith('.webm'))
                <video src="{{ media.url }}" class="rounded-xl w-full h-auto max-h-80 object-contain" controls></video>
              @else
                <img src="{{ media.url }}" class="rounded-xl w-full h-auto max-h-96 object-cover">
              @endif
            @endeach
          </div>
        @endif
      </a>

      <!-- Icons interaction -->
      <div class="flex items-center justify-between mt-4 text-gray-500 text-sm">
        <!-- Comment -->
        <button class="hover:text-blue-500 flex items-center space-x-1" onclick="toggleCommentForm({{ tweet.id }})">
          <i class="fa-regular fa-comment"></i>
          <span id="comment-count-{{ tweet.id }}" class="{{ tweet.commentCount > 0 ? 'text-gray-300' : 'hidden' }}">
            {{ tweet.commentCount || 0 }}
          </span>
        </button>

        <!-- Retweet -->
        <button class="hover:text-green-500 flex items-center space-x-1" onclick="toggleRetweet({{ tweet.id }})">
          <i class="fa-solid fa-retweet"></i>
          <span 
            id="retweet-count-{{ tweet.id }}" 
            class="transition-opacity duration-150 {{ tweet.retweetCount > 0 ? 'text-gray-300' : 'hidden' }}">
            {{ tweet.retweetCount }}
        </span>
        </button>

        <!-- Like --> 
        <button class="like-button flex items-center space-x-1 group" onclick="toggleLike({{ tweet.id }})">
          <i id="like-icon-{{ tweet.id }}" class="fa-heart transition-all duration-150 {{ tweet.isLikedByUser ? 'fa-solid text-red-500' : 'fa-regular text-gray-400' }}"></i>
          <span id="like-count-{{ tweet.id }}" 
          class="transition-opacity duration-150 {{ tweet.likeCount > 0 ? 'text-gray-300' : 'hidden' }}">
            {{ tweet.likeCount || 0 }}
          </span>
        </button>

        <button class="hover:text-yellow-500 flex items-center space-x-1"><i class="fa-regular fa-bookmark"></i></button>
        <button class="hover:text-gray-700 flex items-center space-x-1"><i class="fa-solid fa-share"></i></button>
        <button class="hover:text-gray-700 flex items-center space-x-1"><i class="fa-solid fa-ellipsis"></i></button>
      </div>
    </div>
  </div>

  <!-- Section comments -->
  <div id="comments-section-{{ tweet.id }}" class="hidden mt-2 space-y-2 ">
    <!-- Les commentaires seront injectés ici dynamiquement -->
  </div>
</div>
  <!-- Formulaire de commentaire sous forme de pop-up -->
  <div id="comment-form-{{ tweet.id }}" class="hidden fixed inset-0 bg-black bg-opacity-70 flex items-start justify-center z-50 pt-16">
    <div class="bg-black text-white rounded-2xl w-full max-w-xl border border-gray-800 shadow-xl">
        <!-- En-tête avec bouton de fermeture -->
        <div class="p-3 border-b border-gray-800 flex items-center">
            <button 
                onclick="toggleCommentForm({{ tweet.id }})"
                class="w-9 h-9 flex items-center justify-center rounded-full hover:bg-gray-800 transition"
            >
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        
        <!-- Contenu du tweet original (simulé) -->
        <div class="p-4 border-b border-gray-800 flex">
            <div class="mr-3">
                <div class="w-10 h-10 rounded-full bg-gray-600"></div>
            </div>
            <div class="flex-1">
                <div class="flex items-center">
                    <span class="font-bold mr-1">{{ auth.user.firstname }} {{auth.user.lastname}}</span>
                    <span class="text-gray-500 text-sm">{{auth.user.username}}</span>
                </div>
                <p class="mt-1 text-base">{{ tweet.content }}</p>
                <div class="mt-2 text-sm text-gray-500">
                    En réponse à <span class="text-blue-500">{{auth.user.username}}</span>
                </div>
            </div>
        </div>
        
        <!-- Zone de réponse -->
        <div class="p-4 flex">
            <div class="mr-3">
                <div class="w-10 h-10 rounded-full bg-gray-600"></div>
            </div>
            <div class="flex-1">
                <form onsubmit="submitComment(event, {{ tweet.id }})">
                    <input type="hidden" name="_csrf" value="{{ csrfToken }}">
                    
                    <textarea 
                        name="content" 
                        placeholder="Poster votre réponse" 
                        class="comment-textarea bg-transparent text-white w-full resize-none placeholder-gray-500 text-base"
                        oninput="updateCharCount(this)"
                    ></textarea>
                    
                    <!-- Barre de progression (similaire à Twitter) -->
                    <div class="progress-bar mb-3"></div>
                    
                    <!-- Icônes d'options -->
                    <div class="flex items-center justify-between pt-3 border-t border-gray-800">
                        <div class="flex space-x-0 text-blue-500">
                            <button type="button" class="w-9 h-9 flex items-center justify-center rounded-full hover:bg-blue-900 hover:bg-opacity-20 transition">
                                <i class="far fa-image text-lg"></i>
                            </button>
                            <button type="button" class="w-9 h-9 flex items-center justify-center rounded-full hover:bg-blue-900 hover:bg-opacity-20 transition">
                                <i class="fas fa-list-ul text-lg"></i>
                            </button>
                            <button type="button" class="w-9 h-9 flex items-center justify-center rounded-full hover:bg-blue-900 hover:bg-opacity-20 transition">
                                <i class="far fa-smile text-lg"></i>
                            </button>
                            <button type="button" class="w-9 h-9 flex items-center justify-center rounded-full hover:bg-blue-900 hover:bg-opacity-20 transition">
                                <i class="far fa-calendar-alt text-lg"></i>
                            </button>
                            <button type="button" class="w-9 h-9 flex items-center justify-center rounded-full hover:bg-blue-900 hover:bg-opacity-20 transition">
                                <i class="fas fa-map-marker-alt text-lg"></i>
                            </button>
                        </div>
                        
                        <div class="flex items-center">
                            <span id="char-count-{{ tweet.id }}" class="char-count">0/280</span>
                            <button 
                                type="submit" 
                                id="submit-btn-{{ tweet.id }}"
                                class="bg-white text-black px-4 py-1.5 rounded-full font-bold opacity-50 cursor-not-allowed text-sm hover:bg-gray-400 transition"
                                disabled
                            >
                                Répondre
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endeach


{{-- retweet togle --}}

<script>
    async function toggleRetweet(tweetId) {
      try {
        const response = await fetch('/retweets', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': '{{ csrfToken }}',
          },
          body: JSON.stringify({ tweetId })
        });
      
        if (!response.ok) {
          console.error('Erreur lors du retweet');
          return;
        }
        
      
        const { retweetCount } = await response.json();
      
        const countElement = document.getElementById(`retweet-count-${tweetId}`);

        if (retweetCount > 0) {
            countElement.classList.remove('hidden');
        } else {
            countElement.classList.add('hidden');
        }
        
        countElement.textContent = retweetCount;
        countElement.classList.remove('hidden');
      }
      catch (error) {
        console.error('Erreur lors du traitement:', error);
      }

    }
</script>

{{-- This script displays comments dynamically --}}
<script>
  event.preventDefault();
  async function toggleComments(event,tweetId) {
    console.log('Clicked for tweetId:', tweetId); 

    const container = document.getElementById(`comments-section-${tweetId}`);

    // if the container is already visible, hide it
    if (!container.classList.contains('hidden')) {
      container.classList.add('hidden');
      container.innerHTML = '';
      return;
    }

    try {
      const res = await fetch(`/comments/${tweetId}`);
      const comments = await res.json();

      if (!Array.isArray(comments)) throw new Error("Erreur données");

      let html = '';
      comments.forEach(comment => {
        html += `
          <div class="bg-gray-800 p-4 rounded-lg shadow-md">
            <div class="flex items-start space-x-3">
              <!-- Avatar de l'utilisateur -->
              <img src="${comment.user.profile_picture || '/ressources/img/me.png'}" alt="Avatar" class="w-10 h-10 rounded-full object-cover">
              
              <!-- Contenu du commentaire -->
              <div class="flex-1">
                <div class="flex items-center justify-between">
                  <!-- Nom d'utilisateur et date -->
                  <div>
                    <p class="text-sm font-semibold text-white">${comment.user.username}</p>
                    <p class="text-xs text-gray-400">${new Date(comment.created_at).toLocaleString()}</p>
                  </div>
                </div>
                <!-- Texte du commentaire -->
                <p class="mt-2 text-gray-300 text-sm leading-relaxed">${comment.content}</p>
              </div>
            </div>
          </div>
        `;
      });

      container.innerHTML = html;
      container.classList.remove('hidden');

    } catch (error) {
      console.error('Erreur lors du chargement des commentaires :', error);
    }
  }
</script>

{{-- end --}}

{{-- comment --}}
<script>
  function toggleCommentForm(tweetId) {
      const form = document.getElementById(`comment-form-${tweetId}`);
      form.classList.toggle('hidden');
      
      // Reset form when opening
      if (!form.classList.contains('hidden')) {
          const textarea = form.querySelector('textarea');
          textarea.value = '';
          updateCharCount(textarea);
          
          // Reset progress bar
          const progressBar = form.querySelector('.progress-bar');
          progressBar.style.width = '0%';
          
          // Reset submit button
          const submitBtn = form.querySelector(`#submit-btn-${tweetId}`);
          submitBtn.disabled = true;
          submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
          submitBtn.classList.remove('opacity-100', 'cursor-pointer');
          
          // Reset char count
          const charCount = form.querySelector(`#char-count-${tweetId}`);
          charCount.textContent = '0/280';
          charCount.className = 'char-count';
      }
  }
  
  function updateCharCount(textarea) {
      const content = textarea.value;
      const tweetId = textarea.closest('form').getAttribute('onsubmit').match(/\d+/)[0];
      const progressBar = textarea.closest('form').querySelector('.progress-bar');
      const submitBtn = textarea.closest('form').querySelector(`#submit-btn-${tweetId}`);
      const charCount = textarea.closest('form').querySelector(`#char-count-${tweetId}`);
      
      // Update character count
      const remaining = 280 - content.length;
      charCount.textContent = `${content.length}/280`;
      
      // Calculate percentage (Twitter uses 280 chars max)
      const percentage = Math.min((content.length / 280) * 100, 100);
      progressBar.style.width = `${percentage}%`;
      
      // Change color when approaching limit (like Twitter)
      if (remaining < 0) {
          progressBar.style.backgroundColor = '#f4212e'; // Red error
          charCount.className = 'char-count error';
      } else if (remaining <= 20) {
          progressBar.style.backgroundColor = '#ffd400'; // Yellow warning
          charCount.className = 'char-count warning';
      } else {
          progressBar.style.backgroundColor = '#1d9bf0'; // Blue normal
          charCount.className = 'char-count';
      }
      
      // Enable/disable submit button
      if (content.trim().length > 0 && content.length <= 280) {
          submitBtn.disabled = false;
          submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          submitBtn.classList.add('opacity-100', 'cursor-pointer');
      } else {
          submitBtn.disabled = true;
          submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
          submitBtn.classList.remove('opacity-100', 'cursor-pointer');
      }
  }
  
  async function submitComment(event, tweetId) {
      event.preventDefault();
      
      const form = event.target.closest('form');
      const input = form.querySelector('textarea[name="content"]');
      const content = input.value.trim();
      
      if (content.length === 0 || content.length > 280) {
          return;
      }
      
      try {
          const response = await fetch(`/tweets/${tweetId}/comment`, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-TOKEN': '{{ csrfToken }}',
              },
              body: JSON.stringify({
                  content,
              }),
          });
          
          if (!response.ok) {
              console.error('Erreur lors de l\'envoi du commentaire');
              return;
          }
          
          const { commentCount } = await response.json();
          
          // Met à jour le compteur de commentaires
          const countElement = document.getElementById(`comment-count-${tweetId}`);
          if (countElement) {
              countElement.textContent = commentCount;
              countElement.classList.remove('hidden');
          }
          
          // Réinitialise le champ et referme le formulaire
          input.value = '';
          document.getElementById(`comment-form-${tweetId}`).classList.add('hidden');
          
      } catch (error) {
          console.error('Erreur :', error);
      }
  }
</script>

{{-- like --}}
<script>
  async function toggleLike(tweetId) {
    try {
      const response = await fetch(`/tweets/${tweetId}/like`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-TOKEN': '{{ csrfToken }}',
        },
      });
  
      if (!response.ok) {
        console.error('Erreur lors de la requête:', response.statusText);
        return;
      }
  
      const { likeCount, isLiked } = await response.json();
  
      const likeCountElement = document.getElementById(`like-count-${tweetId}`);
      const likeIcon = document.getElementById(`like-icon-${tweetId}`);
  
      // update like count
      if (likeCount > 0) {
        likeCountElement.textContent = likeCount;
        likeCountElement.classList.remove('hidden');
      } else {
        likeCountElement.classList.add('hidden');
      }
  
      // update like icon
      if (isLiked) {
        likeIcon.classList.remove('fa-regular');
        likeIcon.classList.add('fa-solid', 'text-red-500');
      } else {
        likeIcon.classList.remove('fa-solid', 'text-red-500');
        likeIcon.classList.add('fa-regular');
      }
  
    } catch (error) {
      console.error('Erreur lors du traitement:', error);
    }
  }
  </script>
  